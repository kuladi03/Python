STRING OPERATIONS :
#include <iostream>
#include <string>
using namespace std;
int main()
{
    int p;
    cout<<"Enter your choice \n1.Frequency checker \n2.Delete position \n3.Character delete \n4.Palindrome "<<endl;
    cin>>p;
    string w;
    cout<<"Enter a word: "<<endl;
    cin>>w;
    switch(p)
    {
    case 1:
        {
            int cnt=0;
            char ch;
            cout<<endl<<endl<<"*****FREQUENCY CHECKER*****"<<endl<<endl;
            cout<<"Enter the letter whose frequency you want to check :"<<endl;
            cin>>ch;
            cout<<"The word is "<<w<<endl;
            for(int i=0;w[i]!='\0';i++)
            {
                if(ch == w[i])
                {
                    cnt=cnt+1;
                }
            }
            cout<<"The frequency of the character is :"<<cnt<<endl;
            break;
        }
    case 2:
        {
            cout<<endl<<endl<<"*****DELETE CHARACTER*****"<<endl<<endl;
            int k,j;
            cout<<"Enter the two positions at which you want to delete characters :"<<endl;
            cin>>j>>k;
            string nw;
            for(int a=j-1;w[a]!='\0';a++)
            {
                    w[a]=w[a+1];
            }
            for(int a=k-2;w[a]!='\0';a++)
            {
                    w[a]=w[a+1];
            }
            cout<<"The edited string is :"<<w<<endl;
            break;
        }
    case 3:
        {
            cout<<endl<<endl<<"*****DELETE CHARACTER*****"<<endl<<endl;
            char c;
            cout<<"Enter the character you want to delete characters :"<<endl;
            cin>>c;
            string n;
            for(int a=0;w[a]!='\0';a++)
            {
                if(w[a]!=c)
                {
                    n=n+w[a];
                }
            }
            cout<<"The edited string is :"<<n<<endl;
            break;
        }
    case 4:
        {
           cout<<endl<<endl<<"*****PALIDROME WORD*****"<<endl<<endl;
            int cnt1=0;
            int f=1;
            for (int i=0;w[i]!='\0';i++)
            {
                cnt1=cnt1+1;
            }
            int a=cnt1/2;
            for(int i=0;i<=a;i++)
            {
                if(w[i]!=w[cnt1-1-i])
                {
                    f=0;
                    break;
                }
            }
            if(f==1)
            {
                cout<<"Palindrome word"<<endl;
            }
            else
            {
                cout<<"Not a Palindrome word"<<endl;
            }
            break;
        }
    }
    return 0;
}


Password Generator :
#include <iostream>
using namespace std;
int main()
{
    char s[6]={'1','3','a','s','t','i'};
    int i,j,k,l,c;
    c=0;
    for(i=0;i<6;i++)
        {
            for(j=0;j<6;j++)
            {
                for(k=0;k<6;k++)
                {
                    for(l=0;l<6;l++)
                    {
                        cout<<s[i]<<s[j]<<s[k]<<s[l]<<endl;
                        c++;
                    }
                }
            }
        }
    cout<<"Total number of possible passwords are:"<<c<<endl;
    return 0;
}
 
MATRIX OPERATIONS :
#include <iostream>
using namespace std;
class matrix
{
    public:
    int mat[10][10],mat1[10][10],i,j,mat2[10][10],a,k;
    void sum()
    {
    cout<<"Enter the matrix dimention"<<endl;
    cin>>a;
    cout<<"Enter elements of first matrix"<<endl;
    for(i=0;i<a;i++)
    {
        for(j=0;j<a;j++)
            cin>>mat[i][j];
    }
    cout<<"Enter elements of second matrix"<<endl;
    for(i=0;i<a;i++)
    {
        for(j=0;j<a;j++)
            cin>>mat1[i][j];
    }
    for(i=0;i<a;i++)
    {
        for(j=0;j<a;j++)
           mat2[i][j]=mat[i][j]+mat1[i][j];
    }
    cout<<"Addition of matrix is"<<endl;
    for(i=0;i<a;i++)
    {
        for(j=0;j<a;j++)
          cout<<mat2[i][j]<<" ";
        cout<<endl;
    }
    }
    void sub()
    {
       cout<<"Enter the matrix dimention"<<endl;
       cin>>a;
       cout<<"Enter the matrix dimention"<<endl;
       cin>>a;
       cout<<"Enter elements of first matrix"<<endl;
       for(i=0;i<a;i++)
       {
            for(j=0;j<a;j++)
            cin>>mat[i][j];
    }
    cout<<"Enter elements of second matrix"<<endl;
    for(i=0;i<a;i++)
    {
        for(j=0;j<a;j++)
            cin>>mat1[i][j];
    }
    for(i=0;i<a;i++)
    {
        for(j=0;j<a;j++)
           mat2[i][j]=mat[i][j]-mat1[i][j];
    }
    cout<<"Subtraction of matrix is :"<<endl;
    for(i=0;i<a;i++)
    {
        for(j=0;j<a;j++)
          cout<<mat2[i][j]<<" ";
        cout<<endl;
    }
    }
    void mul()
    {
        cout<<"Enter the matrix dimention"<<endl;
    cin>>a;
    cout<<"Enter elements of first matrix"<<endl;
    for(i=0;i<a;i++)
    {
        for(j=0;j<a;j++)
            cin>>mat[i][j];
    }
    cout<<"Enter elements of second matrix"<<endl;
    for(i=0;i<a;i++)
    {
        for(j=0;j<a;j++)
            cin>>mat1[i][j];
    }
    cout<<"Multiplication of 2 matrices is:"<<endl;
    for(i=0;i<a;i++)
    {
        for(j=0;j<a;j++)
        {
            mat2[i][j]=0;
            for(k=0;k<a;k++)
                mat2[i][j]+=mat[i][k]*mat1[k][j];
        }
    }
    for(i=0;i<a;i++)
    {
        for(j=0;j<a;j++)
        {
            cout<<mat2[i][j]<<" ";
        }
        cout<<endl;
    }
    }
};
int main()
{
    matrix m;
    int c;
    cout<<"Enter your choice: \n1.Addition of matrix \n2.Subtraction of matrix \n3.Multiplication of matrix"<<endl;
    cin>>c;
    switch(c)
    {

    case 1:
        cout<<"You have chosen to add to matrices"<<endl;
        m.sum();
        break;
    case 2:
        cout<<"You have chosen to subtract to matrices"<<endl;
        m.sub();
        break;
    case 3:
        cout<<"You have chosen to multiply to matrices"<<endl;
        m.mul();
        break;
    default:
        cout<<"Wrong input "<<endl;

    }
    return 0;
}
 
SADDLE POINT :
#include<iostream>
using namespace std;
class Matr
{
public:
    int i,j;
    int a[5][5];
    void input(int,int);
    void print(int,int);
    void saddle(int,int);
};

void Matr::input(int r, int c)
{
    cout<<"Matrix 1 : "<<endl;
    for(i=1;i<=r;i++)
    {
        cout<<"Enter row "<<i<<":"<<endl;
        for(j=1;j<=c;j++)
        {
            cout<<"Enter column "<<i<<" element "<<j<<" = ";
            cin>>a[i][j];
        }
    }
}

void Matr::print(int r, int c)
{
    cout<<"Matrix 1 = "<<endl;
    for(i=1;i<=r;i++)
    {
        for(j=1;j<=c;j++)
        {
            cout<<" "<<a[i][j]<<" ";
        }
        cout<<endl;
    }

}

void Matr::saddle(int r,int c)
{
    int mi[10],ma[10],maxi,mini;
    for(i=1;i<=r;i++)
    {
        mi[i]=a[i][1];
        for(j=1;j<=c;j++)
        {
            if(mi[i]>a[i][j])
            {
                mi[i]=a[i][j];
            }
        }
    }
    for(j=1;j<=c;j++)
    {
        ma[j]=a[1][j];
        for(i=1;i<=r;i++)
        {
            if(ma[j]<a[i][j])
            {
                ma[j]=a[i][j];
            }
        }
    }
    maxi=mi[1];
    for(i=1;i<=r;i++)
    {
        if(maxi<mi[i])
        {
            maxi=mi[i];
        }

    }
    mini=ma[1];
    for(j=1;j<=c;j++)
    {
        if(mini>ma[j])
        {
            mini=ma[j];
        }
    }
    if(maxi==mini)
    {
        cout<<"Saddle point exists = "<<maxi<<endl;
    }
    else
    {
        cout<<"Saddle point does not exist"<<endl;
    }
}

int main()
{
    Matr m1;
    int r,c,ch;
    cout<<"Enter value for row = ";
    cin>>r;
    cout<<"Enter value for col = ";
    cin>>c;
    m1.input(r,c);
    cout<<endl;
    do
    {
        cout<<"1.Display 2.Saddle  3.Exit"<<endl;
        cout<<"Enter choice = ";
        cin>>ch;
        switch(ch)
        {
        case 1:
            {
                m1.print(r,c);
                break;
            }
        case 2:
            {
                m1.saddle(r,c);
                break;
            }
        case 3:
            {
                break;
            }
        default:
            {
                cout<<"Invalid Input"<<endl;
                break;
            }
        }
    } while(ch<3);
    return 0;
}
 
STORING OF MATRIX / TRANSPOSED MATRIX :
#include<iostream>
using namespace std;
class Matr
{
public:
    int i,j,k,sum=0;
    int a[5][5],t[5][5];
    void input(int,int);
    void print(int,int);
    void uptri(int,int);
    void sumd(int,int);
    void trans(int,int);
};

void Matr::input(int r, int c)
{
    cout<<"Matrix : "<<endl;
    for(i=1;i<=r;i++)
    {
        cout<<"Enter row "<<i<<":"<<endl;
        for(j=1;j<=c;j++)
        {
            cout<<"Enter column "<<i<<" element "<<j<<" = ";
            cin>>a[i][j];
        }
    }
}
void Matr::print(int r, int c)
{
    cout<<"Matrix  = "<<endl;
    for(i=1;i<=r;i++)
    {
        for(j=1;j<=c;j++)
        {
            cout<<" "<<a[i][j]<<" ";
        }
        cout<<endl;
    }

}
void Matr::uptri(int r,int c)
{
    for(i=1;i<=r;i++)
    {
        for(j=1;j<=i;j++)
        {
            if(a[i][j]==0)
            {
                k=0;
                break;
            }

            else
            {
                k=1;
                continue;
            }
        }
    }
    if(k==0)
        cout<<"Upper triangle matrix"<<endl;
    else
        cout<<"Not a upper triangle matrix"<<endl;

    cout<<"Upper triangle :"<<endl;
    for(i=1;i<=r;i++)
    {
        cout<<endl;
        for(j=1;j<=c;j++)
        {
            if(j>=i)
                cout<<a[i][j]<<" ";
            else
                cout<<"0 ";
        }
    }
}
void Matr::sumd(int r, int c)
{
    for(int i=1;i<=r;i++)
    {
        for(int j=1;j<=c;j++)
        {
            if(i==j)
                sum+=a[i][j];
        }
    }
    cout<<endl<<"Sum of diagonal elements is :"<<sum<<endl;
}
void Matr::trans(int r,int c)
{
    for(int i=1;i<=r;i++)
    {
        for(int j=1;j<=c;j++)
        {
            t[i][j]=a[j][i];
        }
    }
    cout<<"Transposed Matrix  = "<<endl;
    for(i=1;i<=r;i++)
    {
        for(j=1;j<=c;j++)
        {
            cout<<" "<<t[i][j]<<" ";
        }
        cout<<endl;
    }


}
int main()
{
    Matr m1;
    int r,c,ch;
    cout<<"Enter value for row = ";
    cin>>r;
    cout<<"Enter value for col = ";
    cin>>c;
    m1.input(r,c);
    cout<<endl;
    m1.print(r,c);
    cout<<endl;
    m1.uptri(r,c);
    cout<<endl;
    m1.sumd(r,c);
    cout<<endl;
    m1.trans(r,c);
    return 0;
}
 
PINNACLE CLUB :
#include<iostream>
 using namespace std;

 class member
 {
     public:
     string name;
     char year;
     member* next;
 };

 void display(member* head)
 {
     cout<<"\nList of members:\nSr no.\t\tName\t\tYear\n";
     member* temp=head;
     int i=0;
     while(temp!=NULL)
    {
         cout<<++i<<"\t\t"<<temp->name<<"\t\t"<<temp->year<<endl;
         temp=temp->next;
    }
}

 void disprev(member* head)

 {
     cout<<"\nList of members in reverse:\nSr no.\t\tName\t\tYear\n";
     int m=1;
     int n;
     member* temp=head;
     while(temp->next!=NULL)
     {
         m++;
         temp=temp->next;
     }
     while(m!=0)
     {
         n=m;
         temp=head;
         cout<<n<<"\t\t";
         while(n>1)
         {
             temp=temp->next;
             n--;
         }
         cout<<temp->name<<"\t\t"<<temp->year<<endl;
         m--;
     }
 }

 void count(member* head)
 {
     int c=0;
     member* temp=head;
     while(temp!=NULL)
     {
         c++;
         temp=temp->next;
     }
     cout<<"\nThere are "<<c<<" members in the club.\n";
 }

 void init(member** head,member** tail)
 {
     *head=new member();
     *tail=new member();
     (*head)->next=*tail;
     (*tail)->next=NULL;
     cout<<"Enter name of president: ";
     cin>>(*head)->name;     cout<<"Enter year of president: ";
     cin>>(*head)->year;
     cout<<"\nEnter name of secretary: ";
     cin>>(*tail)->name;
     cout<<"Enter year of president: ";
     cin>>(*tail)->year;
     display(*head);
 }

 void addmem(member** head)
 {
     member* newmem=new member();
     cout<<"\nEnter member's name: ";
     cin>>newmem->name;
     cout<<"Enter member's year: ";
     cin>>newmem->year;
     newmem->next=(*head)->next;
     (*head)->next=newmem;
     display(*head);
 }

 void delmem(member** head)
 {
     int d;
     cout<<"\nEnter the sr no. of the member you want to delete: ";
     cin>>d;
     if(d==1)
     {
         cout<<"\nYou can't have a club without a president!\n";
         display(*head);
         return;
     }
     member* temp=*head;
     int s=1;
     while(s!=d-1&&temp->next!=NULL)
     {
        (temp)=(temp)->next;
         s++;
     }
     if(temp->next->next==NULL&&s==d-1)
     {
         cout<<"\nEvery club needs a secretary!\n";
         display(*head);
         return;
     }
     if(s==d-1)
     {
         member* temp2=temp->next->next;
         delete temp->next;
         temp->next=temp2;
         display(*head);
         return;
     }
     cout<<"\nEnter a valid position!";
 }

 int main()
 {
     member* pres;
     member* sec;
     init(&pres,&sec);

     char c;
     while(c!='6')
     {
         cout<<"\nEnter your action:\n1. Add a member\n2. Delete a member\n3. Display all members\n4. Compute number of members\n5. Display list in reverse order\n6. End program";         cin>>c;
         switch(c)
         {
             case '1':
             {
                 addmem(&pres);
                 break;
             }
             case '2':
             {
                 delmem(&pres);
                 break;
             }
             case '3':
             {
                 display(pres);
                 break;
             }
             case '4':
             {
                 count(pres);
                 break;
             }
             case '5':
             {
                 disprev(pres);
                 break;
             }
             case '6':
             {
                 break;
             }
             default:
             {
                 cout<<"\nEnter a valid option!";
             }
         }
     }

     return 0;
 } 
POLYNOMIAL OPERATION :
#include<iostream>
#include<cmath>
using namespace std;
struct polynomial{
    int coef;
    int expo;
};
class poly{
    public:
        polynomial poly_array[100];
        int total_terms;
        poly()
        {
            total_terms = 0;
        }
        void accept();
        void display();
        double evaluate(double);
        poly operator +(poly);
        poly operator *(poly);
};

void poly :: accept(){
    cout<<"Enter Total Number Of Terms : ";
    cin>>total_terms;
    cout<<endl;
    for(int i=0;i<total_terms;i++){
        cout<<"Enter Coefficient Of "<<i+1<<" Term : ";
        cin>>poly_array[i].coef;
        cout<<"Enter Power Of "<<i+1<<" Term : ";
        cin>>poly_array[i].expo;
        cout<<endl;
    }
}

void poly :: display(){
    int i;
    cout<<endl;
    for(i=0;i<total_terms-1;i++){
        cout<<"("<<poly_array[i].coef<<")x^"<<poly_array[i].expo<<"+";
    }
    cout<<"("<<poly_array[i].coef<<")x^"<<poly_array[i].expo;
    cout<<endl;
}

double poly :: evaluate(double value){
    int i=total_terms;
    double result = 0;
    while(i--){
        result += poly_array[i].coef*pow(value,poly_array[i].expo);
    }
    return result;
}

poly poly :: operator+(poly B){
    int k=0,i=0,j=0;
    poly C;
    while(i<total_terms && j<B.total_terms){
        if(poly_array[i].expo == B.poly_array[j].expo){
            C.poly_array[k].coef = poly_array[i].coef + B.poly_array[j].coef;
            C.poly_array[k].expo = poly_array[i].expo;
            i++;
            j++;
            k++;
        }
        else if(poly_array[i].expo > B.poly_array[j].expo){
            C.poly_array[k].coef = poly_array[i].coef;
            C.poly_array[k].expo = poly_array[i].expo;
            i++;
            k++;
        }
        else {  //(poly_array[i].expo < B.poly_array[j].expo)
            C.poly_array[k].coef = B.poly_array[j].coef;
            C.poly_array[k].expo = B.poly_array[j].expo;
            j++;
            k++;
        }
    }
    while(i<total_terms){
        C.poly_array[k].coef = poly_array[i].coef;
        C.poly_array[k].expo = poly_array[i].expo;
        i++;
        k++;
    }
    while(j<total_terms){
        C.poly_array[k].coef = B.poly_array[j].coef;
        C.poly_array[k].expo = B.poly_array[j].expo;
        j++;
        k++;
    }
    C.total_terms = k;
    return C;
}

poly poly :: operator*(poly B){
    poly D; // stores product of the polynomials
    int k=0,i,j,m;
    for (int i=0; i<total_terms; i++){
        // Multiply the current term of first polynomial with every term of second polynomial.
        for (int j=0; j<B.total_terms; j++){
            D.poly_array[k].coef = poly_array[i].coef*B.poly_array[j].coef;
            D.poly_array[k].expo = poly_array[i].expo+B.poly_array[j].expo;
            k++;
        }
    }
    D.total_terms = total_terms*B.total_terms;
    int l = 0;

    //Adding terms with same expo value
    for(i=0;i<D.total_terms-2;i++)
        {
        for(j=i+1;j<D.total_terms-1;j++)
        {
            if(D.poly_array[i].expo == D.poly_array[j].expo)
            {
                D.poly_array[i].coef = D.poly_array[i].coef + D.poly_array[j].coef;

                //Shift all elements on left side
                for(m=j;m<D.total_terms-1;m++)
                    D.poly_array[m]=D.poly_array[m+1];

                D.total_terms--;

            }

        }

    }

   // cout<<"D.total_terms"<<D.total_terms;
    return D;
}

int main(){
    poly A,B,C,D;
    double ans;
    int ch,t=1,x;

        cout<<"Enter First Polynomial :-"<<endl;
        A.accept();
        cout<<endl;
        cout<<"Enter Second Polynomial :-"<<endl;
        B.accept();
        cout<<endl;
       while(t==1){
       cout<<"Polynomial Operations :-\n1.Display Polynomials\n2.Add Polynomials\n3.Multiply Polynomials\n4.Evaluate\n";
        cin>>ch;
        cout<<endl;
        switch (ch)
        {
        case 1:
            cout<<"The First Polynomial :"<<endl;
            A.display();
            cout<<endl;
            cout<<"The Second Polynomial :"<<endl;
            B.display();
            cout<<endl;
            break;

        case 2:
            C = A+B;
            cout<<"Sum Of The Polynomials :"<<endl;
            C.display();
            cout<<endl;
            break;

        case 3:
            D = A*B;
            cout<<"Product Of The Polynomaials :"<<endl;
           D.display();
            cout<<endl;
            break;

        case 4:
            cout<<"Enter Value Of X : ";
            cin>>x;
            cout<<endl;
            A.display();
            ans = A.evaluate(x);
            cout<<"The Value Of Polynomial At (X = "<<x<<") is "<<ans<<endl;
            cout<<endl;
            B.display();
            ans = B.evaluate(x);
            cout<<"The Value Of Polynomial At (X = "<<x<<") is "<<ans<<endl;
            cout<<endl;
            C.display();
            ans = C.evaluate(x);
            cout<<"The Value Of Polynomial At (X = "<<x<<") is "<<ans<<endl;
            cout<<endl;
            D.display();
            ans = D.evaluate(x);
            cout<<"The Value Of Polynomial At (X = "<<x<<") is "<<ans<<endl;
            cout<<endl;
            break;
        default:
            cout<<"Invalid Input!";
            break;
        }
        cout<<"Do you wish to continue(1/0): ";
        cin>>t;
    }
}










INFIX POSTFIX with evaluation :
#include <iostream>
#include <math.h>
using namespace std;
class stacks
{
    char exp[20];
    int top = -1;
    char st[20];
    public:
    void push(char val)
    {
        top++;
        st[top] = val;
    }
    char pop()
    {
        char c = st[top];
        top--;
        return c;
    }
    int ICP(char c)
    {
        if (c == '(')
            return 7;
        else if ((c == '^')||(c == '$'))
            return 6;
        else if (c == '*' || c == '/')
            return 3;
        else if (c == '+' || c == '-')
            return 1;
        else
            return 0;


    }
    int ISP(char c)
    {
        if (c == '(')
            return 0;
        else if ((c == '^')||(c == '$'))
            return 5;
        else if (c == '*' || c == '/')
            return 4;
        else if (c == '+' || c == '-')
            return 2;
        else
            return 0;
    }
    void infpost()
    {
        int i,k = 0;
        char post[20],ch;
        cout<<"Enter the Expression : ";
        cin>>exp;
        for (i = 0;exp[i] != '\0';i++)
        {
            ch = exp[i];
            if (isalpha(ch) || isdigit(ch))
            {
                post[k] = ch;
                k++;
            }
            else if(ch== '(')
            {
                push('(');
            }
            else if(ch == ')')
            {
                char ch1;
                while((ch1 = pop()) != '(')
                {
                    post[k] = ch1;
                    k++;
                }
            }
            else
            {
                while((ISP(st[top]) >= ICP(ch))&&(top!=-1))
                {
                    post[k] = pop();
                    k++;
                }

                push(ch);

            }

        }
        while(top >= 0)
        {
            post[k] = pop();
            k++;
        }
        post[k] = '\0';
        cout<<"Postfix Form is : "<<post<<endl;
    }
};
class Evaluation
{
    public:
    double st[50];
    int top;
    char str[50];
    Evaluation()
    {
        top = -1;
    }
    void push(double item)
    {
        top++;
        st[top] = item;

    }
    double pop()
    {
        double item;
        item = st[top];
        top--;
        return(item);
    }
    double operation(double a,double b, char opr)
    {

        switch(opr)
        {
            case '+':
                return (a+b);
            case '-':
                return (a-b);
            case '*':
                return (a*b);
            case '/':
                return (a/b);
            case '$':
            case '^':
                return (pow(a,b));
            default:
                return (0);
        }
    }
    double calculatePostfix()
    {
        int index = 0;
        double x,y;

        char ch;
        while(str[index] != '\0')
        {
            ch=str[index];
            if(isdigit(ch))
            {
                push(ch-48);
            }
            else if(isalpha(ch))
            {
                cout<<"Enter a Value of  " <<ch<<"  ";
                cin>>x;
                push(x);
            }
            else
            {
                y = pop();
                x = pop();

                double result = operation(x,y,ch);
                push(result);
            }
            index++;
        }
        return (pop());
    }
};
int main()
{
  int choice,ch = 1;
  double result;
  stacks obj;
  Evaluation eval;
  while(ch == 1)
  {
      cout<<"1. Convert Infix to Postfix expression"<<endl;
      cout<<"2. Evaluate Postfix Expression"<<endl;
      cout<<"Enter Your Choice : ";
      cin>>choice;
      switch(choice)
      {
          case 1:
              obj.infpost();
              break;
          case 2:
              cout<<"Enter the Postfix Expression";
              cin>>eval.str;
              result = eval.calculatePostfix();
              cout<<"The Result is : "<<result<<endl;
              break;
          default:
              cout<<"Invalid Input"<<endl;
      }
      cout<<"Do you Want to Continue (1/0) : ";
      cin >> ch;
  }
   return 0;
}











INFIX TO POSTFIX :
#include <iostream>
#include <math.h>
using namespace std;
class stack
{
    char exp[20];
    int top = -1;
    char st[20];
    public:
    void push(char val)
    {
        top++;
        st[top] = val;
    }
    char pop()
    {
        char c = st[top];
        top--;
        return c;
    }
    int ICP(char c)
    {
        if (c == '(')
            return 7;
        else if ((c == '^')||(c == '$'))
            return 6;
        else if (c == '*' || c == '/')
            return 3;
        else if (c == '+' || c == '-')
            return 1;
        else
            return 0;
    }
    int ISP(char c)
    {
        if (c == '(')
            return 0;
        else if ((c == '^')||(c == '$'))
            return 5;
        else if (c == '*' || c == '/')
            return 4;
        else if (c == '+' || c == '-')
            return 2;
        else
            return 0;
    }
    void infpost()
    {
        int i,k = 0;
        char post[20],ch;
        cout<<"Enter the Expression : ";
        cin>>exp;
        for (i = 0;exp[i] != '\0';i++)
        {
            ch = exp[i];
            if (isalpha(ch) || isdigit(ch))
            {
                post[k] = ch;
                k++;
            }
            else if(ch== '(')
            {
                push('(');
            }
            else if(ch == ')')
            {
                char ch1;
                while((ch1 = pop()) != '(')
                {
                    post[k] = ch1;
                    k++;
                }
            }
            else
            {
                while((ISP(st[top]) >= ICP(ch))&&(top!=-1))
                {
                    post[k] = pop();
                    k++;
                }
                push(ch);
            }
        }
        while(top >= 0)
        {
            post[k] = pop();
            k++;
        }
        post[k] = '\0';
        cout<<"Postfix Form is : "<<post<<endl;
    }
};

int main()
{
  stack obj;
  obj.infpost();
   return 0;
}


QUEUE:
#include <iostream>
using namespace std;
int queue[100], n = 100, front = - 1, rear = - 1;
void Insert() 
{
   int val;
   if (rear == n - 1)
       cout<<"Queue Overflow"<<endl;
   else 
   {
      if (front == - 1)
         front = 0;
      cout<<"Insert the element in queue : "<<endl;
      cin>>val;
      rear++;
      queue[rear] = val;
   }
}
void Delete() 
{
   if (front == - 1 || front > rear) 
{
      cout<<"Queue Underflow ";
      return ;
   } 
   else 
   {
      cout<<"Element deleted from queue is : "<< queue[front] <<endl;
      front++;;
   }
}
void Display() 
{
   if (front == - 1)
        cout<<"Queue is empty"<<endl;
   else 
   {
      cout<<"Queue elements are : ";
      for (int i = front; i <= rear; i++)
         cout<<queue[i]<<" ";
         cout<<endl;
   }
}
int main() 
{
   int ch;
   cout<<"1) Insert element to queue"<<endl;
   cout<<"2) Delete element from queue"<<endl;
   cout<<"3) Display all the elements of queue"<<endl;
   cout<<"4) Exit"<<endl;
   do {
      cout<<"Enter your choice : "<<endl;
      cin>>ch;
      switch (ch) {
         case 1: Insert();
         break;
         case 2: Delete();
         break;
         case 3: Display();
         break;
         case 4: cout<<"Exit"<<endl;
         break;
         default: cout<<"Invalid choice"<<endl;
      }
   } while(ch!=4);
   return 0;
}
 
BINARY SEARCHING :
#include<iostream>
using namespace std;
class linear_search
{
public:
    void linear(int A[],int n,int value)
        {
            int pnt,flag=0,i;
            for(i=0;i<n;i++)
            {
                if(A[i]==value)
                {
                    pnt=i;
                    flag=1;
                    break;
                }
            }
            if(flag==1)
                cout<<"Element is present at index "<<pnt<<endl;
            else
                cout<<"Element is not found"<<endl;
        }

};

class bin_search
{
public:
    int binary(int arr[], int low, int high, int val)
    {
        if (high>=low)
            {
                int mid = low+(high-low)/2;
                if (arr[mid]==val)
                    return mid;
                if (arr[mid]>val)
                    return binary(arr, low,mid-1,val);
                return binary(arr,mid+1,high,val);
            }
        return -1; //When element not present in the array
    }
};



int main()
{
    int A[20],n,key,i,chs,ch=1,ele;
    linear_search l1;
    bin_search b1;
    while(ch==1)
    {
        cout<<"Number of elements in Array: ";
        cin>>n;
        cout<<"Enter Array elements: "<<endl;
        for(i=0;i<n;i++)
        {
            cin>>A[i];
        }
        cout<<"Enter search element: ";
        cin>>key;
        cout<< "1.Linear Search  2.Binary Search  3.Exit"<<endl;
        cout<<"Enter choice: ";
        cin>>chs;
        switch(chs)
        {
        case 1:
            l1.linear(A,n,key);
            break;
        case 2:
            ele=b1.binary(A,0,n-1,key);
            if(ele==-1)
            {
                cout<<"Element is not found"<<endl;
            }
            else
            {
                cout<<"Element is found at index: "<<ele<<endl;
            }
            break;
        default:
            cout<<"Invalid Input"<<endl;
        }
        cout<<"Do you wish to continue(1/0): ";
        cin>>ch;
    }
    return 0;
}
 
SINGLY LINKED LIST :
#include<iostream>
#include<string.h>
#include<cstdlib>
using namespace std;
class llist{
private:
    typedef struct node{
        int data;
        struct node* next;
    }* nodeptr;
    nodeptr head;
    nodeptr curr;
    nodeptr temp;
    public:   //all functions accessing the private data help operate the list
        llist();  //constructor function
        void AddNode(int addData);
        void DelNode(int delData);
        void PrintList();
};

llist::llist(){
    head = NULL;
    curr = NULL;
    temp = NULL;
}

void llist::AddNode(int addData){
     nodeptr nn=new node;
     nn->next=NULL;
     nn->data=addData;

     if(head!=NULL)
     {
         curr = head;
         while(curr->next != NULL)
         {
             curr = curr->next;
         }
         curr->next=nn;
     }
     else
     {
         head=nn;
     }
}


void llist::DelNode(int delData){
    nodeptr delptr=NULL;
    temp=head;
    curr=head;
    while(curr!=NULL &&curr->data!=delData)
    {
        temp=curr;
        curr=curr->next;
    }
    if(curr==NULL)
    {
        cout<<"The value "<<delData<<" is not in the list"<<endl;
        delete delptr;
    }
    else
    {
        delptr=curr;
        curr=curr->next;
        temp->next=curr;
        delete delptr;
        cout<<"The value "<<delData<<" was deleted  "<<endl;
    }
}

void llist::PrintList(){
    cout<<"The list : "<<endl;
    curr=head;
    while(curr!=NULL)
    {
        cout<<curr->data<<endl;
        curr=curr->next;
    }
    cout<<endl;
}


int main()
{
    int ch,cnt;
    llist Ll1;
    Ll1.PrintList();
    do
    {
        cout<<"1.Add Node  2.Delete Node  3.Print Linked List  4.Exit"<<endl;
        cout<<"Enter choice : ";
        cin>>ch;
        if(ch==4)
        {
            break;
        }
        switch(ch)
        {
        case 1:
            int ad;
            cout<<"Enter data to add = ";
            cin>>ad;
            Ll1.AddNode(ad);
            break;

        case 2:
            {
                int dd;
                Ll1.PrintList();
                cout<<"Select data to delete = ";
                cin>>dd;
                Ll1.DelNode(dd);
                break;
            }
        case 3:
            {
                Ll1.PrintList();
                break;
            }

        default:
            {
                cout<<"Invalid Input"<<endl;
                break;
            }
        }
    } while(ch<4);
    return 0;
} 
BUBBLE SORT :
#include <stdio.h>
 
int main()
{
  int array[100], n, c, d, swap;
 
  printf("Enter number of elements\n");
  scanf("%d", &n);
 
  printf("Enter %d integers\n", n);
 
  for (c = 0; c < n; c++)
    scanf("%d", &array[c]);
 
  for (c = 0 ; c < n - 1; c++)
  {
    for (d = 0 ; d < n - c - 1; d++)
    {
      if (array[d] > array[d+1]) /* For decreasing order use < */
      {
        swap       = array[d];
        array[d]   = array[d+1];
        array[d+1] = swap;
      }
    }
  }
 
  printf("Sorted list in ascending order:\n");
 
  for (c = 0; c < n; c++)
     printf("%d\n", array[c]);
 
  return 0;
}







SELECTION SORT :
#include <stdio.h>
 
int main()
{
  int array[100], n, c, d, position, swap;
 
  printf("Enter number of elements\n");
  scanf("%d", &n);
 
  printf("Enter %d integers\n", n);
 
  for (c = 0; c < n; c++)
    scanf("%d", &array[c]);
 
  for (c = 0; c < (n - 1); c++)
  {
    position = c;
   
    for (d = c + 1; d < n; d++)
    {
      if (array[position] > array[d])
        position = d;
    }
    if (position != c)
    {
      swap = array[c];
      array[c] = array[position];
      array[position] = swap;
    }
  }
 
  printf("Sorted list in ascending order:\n");
 
  for (c = 0; c < n; c++)
    printf("%d\n", array[c]);
 
  return 0;
}
 
INSERTION SORT :
#include <stdio.h>
 
int main()
{
  int n, array[1000], c, d, t;
 
  printf("Enter number of elements\n");
  scanf("%d", &n);
 
  printf("Enter %d integers\n", n);
 
  for (c = 0; c < n; c++)
    scanf("%d", &array[c]);
 
  for (c = 1 ; c <= n - 1; c++) {
    d = c;
 
    while ( d > 0 && array[d-1] > array[d]) {
      t          = array[d];
      array[d]   = array[d-1];
      array[d-1] = t;
 
      d--;
    }
  }
 
  printf("Sorted list in ascending order:\n");
 
  for (c = 0; c <= n - 1; c++) {
    printf("%d\n", array[c]);
  }
 
  return 0;
}
